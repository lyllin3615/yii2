=========================================================
以下为手册操作说明,本地默认地址为 www.yii2.com,作了url重写

1.(MVC中 VC使用)
访问地址为:
www.yii2.com/site/say-message/
建立新的方法，输出内容
在 controllers/SiteController.php 建立 actionSayMessage方法
方法名以action开头，用驼峰式命名，访问时，action去掉，全部用小写，单词
之间用 "-" 连接
在里面定义了一个展示模板

建立模板
在 views/site/sayMessage.php

2。使用表单
在 models中建立TestForm.php
在 controllers/SiteController.php 建立表单方法actionTest
因为存在 csrf，所以可以用以下方法处理
在提交的模板中加入 csrf隐藏域名
<input name="_csrf" type="hidden" id="_csrf" value="<?= Yii::$app->request->csrfToken ?>">
或者关闭这个验证
public function init()
{
    $this->enableCsrfValidation = false;
}
//或者
public function __construct($id, $module, $config = [])
{
    $this->menuActive = 2;
    $this->enableCsrfValidation = false;
    parent::__construct($id, $module, $config);     
          
}
或者加入
在AJAX中加入_csrf字段
var csrfToken = $('meta[name="csrf-token"]').attr("content");
$.ajax({
    type: 'POST',
    url: url,
    data: {
        _csrf:csrfToken},
        success: success,
        dataType: dataType
});

3.数据库的使用
常用 use yii\db\ActiveRecord 中的方法
A.通用执行方法
// vedor/yiisoft/yii2/db/Command.php 中的方法集合
$db = Yii::$app->db;
其中
$where = \PDO::FETCH_ASSOC或\PDO::FETCH_ASSOC或\PDO::FETCH_COLUMN
$res = $db->createCommand("select * from cate_new")->queryAll($where); 
print_r($res);

B.可以像TP用法,查找id=13的数据,其中的表名与模型的名称相关
$rr = self::findOne('13');
echo $rr->name;

C.多表查询
$post = Yii::$app->db->createCommand("select * from cate,sz_cate where cate.id = sz_cate.id")->queryAll(\PDO::FETCH_ASSOC);
print_r($post);

D.查询单条数据
$post = Yii::$app->db->createCommand("select * from sz_cate")->queryOne(\PDO::FETCH_ASSOC);
print_r($post);

E.查询单列
$post = Yii::$app->db->createCommand("select cate from sz_cate limit 1")->queryColumn();
print_r($post);

F.获取总数
$post = Yii::$app->db->createCommand("select count(*)  from sz_cate")->queryScalar();
print_r($post);

G.根据条件查询
$post = Yii::$app->db->createCommand("select * from cate where id=:id and name=:name")
->bindValue(":id", 11)
->bindValue(":name",'ln00')
->queryOne();

H.根据条件查询
 $params = [':id'=>11,':name'=>'ln00'];
 $post = Yii::$app->db->createCommand("select * from cate where id = :id and name=:name")
	    ->bindValues($params)
	    ->queryAll(\PDO::FETCH_ASSOC);
 print_r($post);

I.根据条件查询
$param = [':field'=>13];
$post = Yii::$app->db->createCommand("select * from cate where id=:field",$param)->queryOne();
print_r($post);

J.根据条件查询
$command = Yii::$app->db->createCommand("select * from cate where id=:id")
->bindParam(':id',$id);
$id = 13;
$post = $command->queryOne();
print_r($post);

$id = 1;
$pp = $command->queryOne();
print_r($pp);

K.插入更新之类操作
$status = Yii::$app->db->createCommand("update cate set name='lin3615' where id = 1111")->execute();
var_dump($status);

L.插入方法
$status = Yii::$app->db->createCommand()->insert('cate',['name'=>'lin361500', 'time'=>time()])->execute();
var_dump($status);

M.更新操作
$status = Yii::$app->db->createCommand()->update('cate',['name'=>'li'],'id=16')->execute();
var_dump($status);

N.批量插入
$status = Yii::$app->db->createCommand()
->batchInsert('cate',['name','time'],
[['aaa',time()],['bb',time()-3600],['ccc',time()-7200]])->execute();
var_dump($status);

O.事务操作,不能传递参数
$status = Yii::$app->db->transaction(function($db){
$sql1 = "insert into cate_new(name) values('lin3615')";
$sql2 = "update cate set name='lyl0000' where id = 15";
$db->createCommand($sql1)->execute();
$db->createCommand($sql2)->execute();
});
        
P.事务操作，可传递参数
$name = 'lin3615';
$id = 15;
$sql1 = "insert into cate_new(id,name) values('16',".$name."')";
$sql2 = "update cate set name='lyl0000---' where id = '".$id."'";
$db = Yii::$app->db;
$transaction = $db->beginTransaction();
try {
    $db->createCommand($sql1)->execute();
    $db->createCommand($sql2)->execute();
    $transaction->commit();
}catch(\Exception $e)
{
    $transaction->rollBack();
    throw $e;
}
相关注入等方法更多的使用，可以看 models/Cate.php中的写法